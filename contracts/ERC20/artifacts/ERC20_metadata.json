{
	"compiler": {
		"version": "0.7.4+commit.3f05b770"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "remaining",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Joel Reis",
			"details": "Interface of the ERC20 standard as defined in the EIP, in addition to the most common      enhanced properties. These are implemented by almost all ERC20 tokens, and required for      `AutoDeFi` to work correctly. All ERC20 tokens used in this protocol, must conform to      this interface, and not the simplistic IERC20",
			"kind": "dev",
			"methods": {
				"allowance(address,address)": {
					"params": {
						"_owner": "The address of the account owning tokens",
						"_spender": "The address of the account able to transfer the tokens"
					},
					"returns": {
						"remaining": "Amount of remaining tokens allowed to spent"
					}
				},
				"approve(address,uint256)": {
					"params": {
						"_spender": "The address of the account able to transfer the tokens",
						"_value": "The amount of wei to be approved for transfer"
					},
					"returns": {
						"success": "Whether the approval was successful or not"
					}
				},
				"balanceOf(address)": {
					"details": "necessary to know how many specific tokens an ETH address has",
					"params": {
						"_owner": "The address from which the balance will be retrieved"
					},
					"returns": {
						"balance": "the balance"
					}
				},
				"name()": {
					"details": "The name for the given token",
					"returns": {
						"_0": "memory The name of the ERC20 token"
					}
				},
				"symbol()": {
					"details": "Then symbol for the given token (e.g. `USDC`)",
					"returns": {
						"_0": "memory The of the ERC20 symbol"
					}
				},
				"transfer(address,uint256)": {
					"params": {
						"_to": "The address of the recipient",
						"_value": "The amount of token to be transferred"
					},
					"returns": {
						"success": "Whether the transfer was successful or not"
					}
				},
				"transferFrom(address,address,uint256)": {
					"params": {
						"_from": "The address of the sender",
						"_to": "The address of the recipient",
						"_value": "The amount of token to be transferred"
					},
					"returns": {
						"success": "Whether the transfer was successful or not"
					}
				}
			},
			"title": "An interface that defines the enhanced ERC20 spec",
			"version": 1
		},
		"userdoc": {
			"events": {
				"Approval(address,address,uint256)": {
					"notice": "An event used to communicate that an ERC20 asset transfer has happened"
				},
				"Transfer(address,address,uint256)": {
					"notice": "An event used to communicate that an ERC20 asset transfer has happened"
				}
			},
			"kind": "user",
			"methods": {
				"approve(address,uint256)": {
					"notice": "`msg.sender` approves `_addr` to spend `_value` tokens"
				},
				"balanceOf(address)": {
					"notice": "provides the amount of tokens a specific address has"
				},
				"name()": {
					"notice": "Provides the name of the associated token"
				},
				"symbol()": {
					"notice": "Provides the symbol of the associated token"
				},
				"transfer(address,uint256)": {
					"notice": "send `_value` token to `_to` from `msg.sender`"
				},
				"transferFrom(address,address,uint256)": {
					"notice": "send `_value` token to `_to` from `_from` on the condition it is approved by `_from`"
				}
			},
			"notice": "Use this interface to define a new ERC20 asset including a few additional properties",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/ERC20/IERC20.sol": "ERC20"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/ERC20/IERC20.sol": {
			"keccak256": "0x6bf31f9696663b072577ea8d27c036c61dead4f4e708abe651a37a9eef6616e5",
			"license": "MIT",
			"urls": [
				"bzz-raw://781a75a19e604e0c02258ac6866de98a76768b12ddf29c06422871fd5c81fa56",
				"dweb:/ipfs/QmaUsTPLTVD4U6AGvm5wEjrqH5Sh6As6XQQp3PEtVzbT9e"
			]
		}
	},
	"version": 1
}