{
	"compiler": {
		"version": "0.7.4+commit.3f05b770"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "facade",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "depositor",
						"type": "address"
					}
				],
				"name": "LogDeposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "facade",
						"type": "address"
					}
				],
				"name": "LogWithdraw",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "depositToUnderlying",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "destroy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "mintedAssetSymbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "mintedBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "underlyingAssetSymbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "underlyingBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Joel Reis",
			"details": "This is an interface that defines the required functionality for a `Facade`. The `Facade` may contain complex      logic to interface with a specific DeFi protocol, but the interface should always be simple and uniform",
			"events": {
				"LogDeposit(address,address)": {
					"details": "Logs when a deposit has been performed for a given `Facade`",
					"params": {
						"depositor": "The address of the custodian that performed, and paid for the deposit transaction",
						"facade": "The address of the `Facade` that had the action performed"
					}
				},
				"LogWithdraw(address)": {
					"details": "Logs when a withdrawal has been performed for a given `Facade`",
					"params": {
						"facade": "The address of the `Facade` that had the action performed"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"depositToUnderlying()": {
					"details": "Deposits the asset associated with the asset pair"
				},
				"destroy()": {
					"details": "This should be a protected function to prevent abuse of withdrawing      Withdrawing should always deposit funds back to the `owner`"
				},
				"mintedAssetSymbol()": {
					"details": "Should forward requests to the minting token",
					"returns": {
						"_0": "The symbol for the minted token that is available for withdrawing"
					}
				},
				"mintedBalance()": {
					"details": "Should forward requests to the minting token e.g. cUSDC, cDAI",
					"returns": {
						"_0": "The amount of the minted balance that is available for withdrawing"
					}
				},
				"underlyingAssetSymbol()": {
					"details": "Should forward requests to the underlying token",
					"returns": {
						"_0": "The symbol for the underlying token that is available for deposit"
					}
				},
				"underlyingBalance()": {
					"details": "Should forward requests to the underlying token",
					"returns": {
						"_0": "The amount of the underlying token that is available for deposit"
					}
				},
				"withdraw()": {
					"details": "This should be a protected function to prevent abuse of withdrawing      Withdrawing should always deposit funds back to the `owner`"
				}
			},
			"title": "An interface that defines what a `Facade` implementation should be able to do",
			"version": 1
		},
		"userdoc": {
			"events": {
				"LogDeposit(address,address)": {
					"notice": "An event used to communicate that a \"Deposit\" was performed"
				},
				"LogWithdraw(address)": {
					"notice": "An event used to communicate a \"Withdrawal\" was performed"
				}
			},
			"kind": "user",
			"methods": {
				"depositToUnderlying()": {
					"notice": "This deposits assets into the underlying contract, from the current account e.g. Account -> Compound"
				},
				"destroy()": {
					"notice": "Destroys the facade and transfers all funds to user wallet"
				},
				"mintedAssetSymbol()": {
					"notice": "The asset symbol for the minting token e.g. cUSDC, cDAI"
				},
				"mintedBalance()": {
					"notice": "The balance inside the account of the minting token"
				},
				"underlyingAssetSymbol()": {
					"notice": "The asset symbol for the underlying token e.g. USDC, DAI"
				},
				"underlyingBalance()": {
					"notice": "The balance inside the account of the underlying token e.g. USDC, DAI"
				},
				"withdraw()": {
					"notice": "Withdraws funds from underlying contract, to EOA e.g. Comound -> Account -> EOA"
				}
			},
			"notice": "Use this interface to define a new `Facade` implementation for a new DeFi protocol",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"localhost/Facades/FacadeInterface.sol": "Facade"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"localhost/Facades/FacadeInterface.sol": {
			"keccak256": "0xbb8bf70cbec66a32707e20d8d3c487d85044a34bb1ebe3d6a2422817aaf75d7f",
			"license": "MIT",
			"urls": [
				"bzz-raw://fdb3a1cc7f3150b973d8761ef67bd882139c89ee9c2684e360c09ecd070ed1e7",
				"dweb:/ipfs/Qmaaw7tgbMMH4SY8WTBAvn7sP5kzoe5UususTus3yoqBob"
			]
		}
	},
	"version": 1
}