/**
 *
 * autogenerated by solidity-visual-auditor
 *
 * execute with:
 *  #> truffle test <path/to/this/test.js>
 *
 * */
const CompoundFacade = artifacts.require("CompoundFacade")
const StandardERC20 = artifacts.require("StandardERC20")

contract("CompoundFacade", (accounts) => {
  var creatorAddress = accounts[0]
  var firstOwnerAddress = accounts[1]
  var secondOwnerAddress = accounts[2]
  var externalAddress = accounts[3]
  var unprivilegedAddress = accounts[4]
  /* create named accounts for contract roles */

  before(async () => {
    /* before tests */
  })

  beforeEach(async () => {
    /* before each context */
  })

  it("Should deploy a valid Compound Facade", async () => {
    const erc1 = await StandardERC20.new(1000, "Fake USDC", 18, "fUSDC")
    const erc2 = await StandardERC20.new(1000, "Fake cUSDC", 18, "fcUSDC")
    const facade = await CompoundFacade.new(
      creatorAddress,
      erc1.address,
      erc2.address
    )

    console.log("real address?", facade.address)
    assert.isNotNull(
      facade.address,
      "Deploy attempt resulted in null address :/"
    )
  })

  it("Facade owner should be different than deploying address", async () => {
    const erc1 = await StandardERC20.new(1000, "Fake USDC", 18, "fUSDC")
    const erc2 = await StandardERC20.new(1000, "Fake cUSDC", 18, "fcUSDC")
    const facade = await CompoundFacade.new(
      firstOwnerAddress,
      erc1.address,
      erc2.address
    )
    assert.equal(
      await facade.owner(),
      firstOwnerAddress,
      "Facade owner is not the correct owner!"
    )
  })

  it("Should throw error when not using valid ERC20 address", async () => {
    try {
      const invalidERC20 = unprivilegedAddress
      const facade = await CompoundFacade.new(
        firstOwnerAddress,
        invalidERC20,
        invalidERC20
      )
      assert.fail(
        "Facade with invalid address deployed, this should have reverted"
      )
    } catch (error) {
      assert.isNotNull(error, "No error during catch.")
    }

    // console.log(facade.address)
  })

  it("Should deploy a valid Compound Facade", async () => {
    const erc1 = await StandardERC20.new(1000, "Fake USDC", 18, "fUSDC")
    const erc2 = await StandardERC20.new(1000, "Fake cUSDC", 18, "fcUSDC")
    console.log("ERC2??", erc2.address)
    const facade = await CompoundFacade.new(
      firstOwnerAddress,
      erc1.address,
      erc2.address
    )

    console.log(facade.address)
  })
})
